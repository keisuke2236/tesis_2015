卒論の目次
1 序論
    1.1 近年の人工知能
        1.1.1 人工無能
        1.1.2 人工知能
        1.1.3 DeepLearning

    1.2 一般的な人工知能開発フレームワーク
        1.2.1 Chainer
        1.2.2 DL4J

    1.3 一般的な人工知能の返答の流れ

2 提案
    2.1 現在実在するフレームワークの問題点
        2.1.1 人工知能との会話のビジュアル
        2.1.2 入出力部分の作成
        2.1.3 その他の人工知能との連携

    2.2 簡単に対話アルゴリズムを開発し試すハブ
        2.2.1 解析アルゴリズムのみの開発
        2.2.2 解析済み情報の共有
        2.2.3 対話アルゴリズムのみの開発
        2.2.4 Unityとブラウザによる入出力の完備

3 設計
    3.1 人工知能ハブ全体の設計
        3.1.1 Unityからの入力に対して返答を作る知能
        3.1.2 作成したアルゴリズムをすぐにUnityで試せる機構
        3.1.3 Unityが利用可能なモーションを追加する機構

    3.2 入力情報を解析する工程
        3.2.1 解析したい内容別にプログラムを保持する機能
        3.2.2 会話の分野別に解析するプログラムを選ぶ機能
        3.2.3 解析アルゴリズムを簡単に追加する機能

    3.3 データベースの設計
        3.3.1 解析情報を保存する機能
        3.3.2 解析済みの情報を取得する機能

    3.4 出力情報を作成する工程
        3.4.1 出力を行うタイミング
        3.4.2 出力する内容別にプログラムを保持する機能
        3.4.3 会話の分野別に解析するプログラムを選ぶ機能
        3.4.4 返答アルゴリズムを簡単に追加する機能

4 実装
    4.1 開発環境
        4.1.1 Javaの利用
        4.1.2 Mavenフレームワーク

    4.2 Unityとの通信
        4.2.1 Websocketの利用
        4.2.2 送信する情報
        4.2.3 受信する情報

    4.3 解析部分の実装
        4.3.1 解析分野別にアルゴリズムを保持する機構
        4.3.2 会話の話題別に解析するアルゴリズムを選択する機構
        4.3.3 解析アルゴリズムを簡単に追加する機構
        4.3.4 現在実装している解析アルゴリズム

    4.4 データベースの実装
        4.4.1 全ての解析情報を保存する機構
        4.4.2 解析した情報を取得する機構

    4.5 出力情報を作成する機構
        4.5.1 出力分野別にアルゴリズムを保持する機構
        4.5.2 会話の話題別に出力を作成するアルゴリズムを選択する機構
        4.5.3 返答アルゴリズムを簡単に追加する機構
        4.5.4 現在実装している出力アルゴリズム

    4.6 GoogleAPIを用いた会話の分野を特定する機構
        4.6.1 GoogleAPIについて
        4.6.2 GoogleAPIの有効性
        4.6.3 形態素解析による検索ワードの作成
        4.6.4 検索結果のフィルタリング
        4.6.5 頻出単語表の作成

5 実行結果
    5.1 Unityの出力画面の図
    5.2 実際の会話
    5.3 アルゴリズムを追加した後の会話

6 評価
    6.1 アルゴリズムの追加による出力の変化
    6.2 Googleを用いた会話の話題推定の精度

7 参考文献


ーーーーーーーーーーー
メモ
設計の部分ではコンセプトを伝える(図や画像を使う)
実装の部分ではソースコードを用いて丁寧に実装がどうなっているのかについて解説する
